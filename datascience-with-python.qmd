---
title: "Data Science with Python"
description: Documenting Data Science Ideas and Techniques
author: 
  name: Gideon Eshun
  url: mailto:fiiisnpires@gmail.com
format: 
  html:
    theme: 
      light: cosmo
      dark: darkly
    toc: true
    html-math-method: katex
title-block-banner: "#003865"
---

## Introduction to Data Science and Problem Solving

### Problem-Solving Skills

Data science is not just about working with data; it starts with a problem and the thinking process behind it. Organizations hire data scientists because they believe they have problems that data can address. At its core, data science is about problem-solving. While the tools and techniques used in data science evolve over time, the fundamental problem-solving skills remain constant.

For example, newer techniques like XGBoost often outperform older algorithms such as Random Forest, though both serve the same purpose of making predictions based on data. What truly matters is the ability to think critically and approach problems with a willingness to learn.

Each phase of data science can be viewed as a problem-solving task. Defining the problem is the first challenge, as solving the wrong problem is a waste of time and resources. Problem definition determines what data needs to be collected. Collecting the right data in the appropriate amount is another problem that requires problem-solving skills. Analyzing the data to generate insights involves identifying patterns, trends, and relationships. For instance, a data scientist might analyze customer behavior to determine which products are frequently purchased together and use this insight for targeted marketing campaigns.

Python is just one of the tools used to implement hypotheses about data. It's important to remember that the programming language or tool is secondary to the analytical thinking and problem-solving skills that drive data science projects.

#### Critical Thinking

Problem-solving in data science involves breaking down complex problems into smaller, manageable parts. This helps in identifying key issues and developing focused strategies. Critical thinking plays a crucial role in this process by evaluating information and making judgments. After defining the problem, one must:

-   Brainstorm possible solutions.

-   Evaluate them.

-   Select the best one.

Critical thinking helps in understanding the assumptions and limitations of different solutions and models, guiding the selection of the most suitable one based on available evidence.

### The Analyst's Reductionist Approach

An analyst, even if not working directly with data, employs a reductionist view to find underlying elements. When the resource being analyzed is data, this person becomes a data analyst. However, analysts also need a synthetic or system approach to understand why certain data is produced, which involves considering the bigger picture and engaging with stakeholders and subject-matter experts.

Analytical thinking involves understanding the building blocks or fundamentals and then constructing complex expressions from them. In programming, for instance, data types and operators are the basic building blocks. Understanding these primitives allows one to build more advanced computations. Similarly, in data science, understanding the basics of data manipulation and analysis is crucial for creating sophisticated models and solutions.

Science often uses models to represent real-world phenomena, employing a reductionist approach to simplify complex realities. In data science, this can be seen in machine learning, where models are functions that take data as input and provide predictions as output. This approach allows for understanding and inferring real-world behaviors through simplified representations.

Data analysis does not start with analysis but with synthesis. This involves understanding the context of the project and how it fits into the bigger picture. It's essential to grasp the business problem that needs to be solved and the value it brings to the organization. Knowing the project's context helps ensure that the analysis aligns with the business goals and addresses the right issues.

### Identifying the Problem to Solve

A data scientist must clearly understand the business goal that the analysis will address. For instance, the goal might be to increase revenue or save costs. Ultimately, businesses are focused on financial outcomes, so even time-saving measures should be translated into monetary value.

#### Asking the Right Questions

To effectively address the business goal, asking the right questions is crucial. If the goal is to increase revenue, some pertinent questions might include:

-   What are the factors influencing revenue?

-   Which products and services are most profitable?

-   How can we optimize our operations to boost profitability?

-   What customer behaviors drive the most sales?

By asking these questions, data scientists can focus their analysis on areas that will have the most significant impact on the business, ensuring that their efforts are aligned with the organization's objectives.

## Introduction to Python Programming

Consider the analytic question below:

> Between the years `2016` and `2020`, $KN^4$ company recorded the following revenues (in CAD): `12000, 23000, 15000, 10000, 18000` respectively. How do you help $KN^4$ understand if it's `2021` revenue is in line with historical revenues?

### Python as calculator

Currently, we do not know the revenue for 2021. One approach would be to compare it with the revenue from 2020 to determine if it falls short or exceeds by a certain percentage. This method assumes that the most recent value is a good indicator of future performance.

However, relying solely on the 2020 revenue does not take into account the overall trend from previous years. To make a more informed comparison, we need a single representative number that combines all historical revenues. This can be achieved by calculating the mean (average) of the revenues from 2016 to 2020.

To determine the mean (average) revenue for \$KN\^4\$ from 2016 to 2020, we use the following calculation:

```{python}
(12000 + 23000 + 15000 + 10000 + 18000) / 5
# 15600.0
```

If you were able to type this out and see a result, congratulations! You just wrote an expression that Python can interpret. Let's break down this expression to understand how Python processes it:

-   **Numbers:** Python recognizes `12000`, `23000`, `15000`, `10000`, and `18000` as integers (whole numbers).

-   **Operators:** The plus sign `+` is an arithmetic operator for addition, and the forward slash `/` is for division.

-   **Parentheses:** The parentheses `()` group the expressions, instructing Python to first add the integers and then divide the sum by another integer.

Here is how Python interprets this expression:

1.  **Addition:** Python adds the numbers together inside the parentheses: $12000 + 23000 + 15000 + 10000 + 18000 = 78000$

2.  **Division:** Python then divides the sum by 5: $\frac{78000}{5} = 15600.0$

Notice the result is `15600.0`, a number with a decimal point. Python calls this type of number a `float`, short for floating-point number. Floats allow us to deal with numbers that have fractional components, such as `3.142`.

#### Understanding Data Types and Operations in Python

In Python, every object has a data type, which defines how you can interact with it:

-   **Integers (`int`):** Whole numbers without a fractional component, e.g., `12000`.

-   **Floating-point numbers (`float`):** Numbers with a fractional component, e.g., `15600.0`.

Python correctly performs the addition `+` and division `/` operations on our numbers because it recognizes the context in which these operators are used. It's important to note that:

-   **Arithmetic Operators:** `+` and `/` are not the only arithmetic operators in Python. Other operators include `-` (subtraction), `*` (multiplication), and `%` (modulus).

-   **Order of Operations:** Python follows the mathematical order of operations (PEMDAS/BODMAS). Without parentheses, the division would be performed before the addition, leading to an incorrect result.

#### Importance of Parentheses

Using parentheses helps ensure the correct order of operations. For example, omitting the parentheses in our original expression would result in a different calculation:

$12000+23000+15000+10000+18000/5=63600.0$

This incorrect result occurs because Python performs the division first ($18000 / 5 = 3600$) and then adds the other numbers ($12000 + 23000 + 15000 + 10000 + 3600 = 63600$).

By correctly using parentheses, we ensure that the addition is performed before the division, yielding the correct mean revenue.
